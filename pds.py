# -*- coding: utf-8 -*-
"""PDS

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1O0td64LikV2td_fjpjqevXpKSzIzTr64
"""

!pip install streamlit

# Import necessary libraries
import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.pipeline import Pipeline
from sklearn.metrics import accuracy_score
import pickle

# Load data
match = pd.read_csv('/content/matches.csv')
delivery = pd.read_csv('/content/deliveries.csv')

# Preprocess data
total_score_df = delivery.groupby(['match_id', 'inning']).sum()['total_runs'].reset_index()
total_score_df = total_score_df[total_score_df['inning'] == 1]
match_df = match.merge(total_score_df[['match_id', 'total_runs']], left_on='id', right_on='match_id')

teams = [
    'Sunrisers Hyderabad',
    'Mumbai Indians',
    'Royal Challengers Bangalore',
    'Kolkata Knight Riders',
    'Kings XI Punjab',
    'Chennai Super Kings',
    'Rajasthan Royals',
    'Delhi Capitals'
]

match_df['team1'] = match_df['team1'].replace({'Delhi Daredevils': 'Delhi Capitals', 'Deccan Chargers': 'Sunrisers Hyderabad'})
match_df['team2'] = match_df['team2'].replace({'Delhi Daredevils': 'Delhi Capitals', 'Deccan Chargers': 'Sunrisers Hyderabad'})
match_df = match_df[(match_df['team1'].isin(teams)) & (match_df['team2'].isin(teams))]
match_df = match_df[match_df['dl_applied'] == 0]
match_df = match_df[['match_id', 'city', 'winner', 'total_runs']]

# Feature engineering
delivery_df = match_df.merge(delivery, on='match_id')
delivery_df = delivery_df[delivery_df['inning'] == 2]
delivery_df['current_score'] = delivery_df.groupby('match_id').cumsum()['total_runs_y']
delivery_df['runs_left'] = delivery_df['total_runs_x'] - delivery_df['current_score']
delivery_df['balls_left'] = 126 - (delivery_df['over'] * 6 + delivery_df['ball'])
delivery_df['player_dismissed'] = delivery_df['player_dismissed'].fillna("0").apply(lambda x: "1" if x != "0" else "0").astype('int')
wickets = delivery_df.groupby('match_id').cumsum()['player_dismissed'].values
delivery_df['wickets'] = 10 - wickets
delivery_df['crr'] = (delivery_df['current_score'] * 6) / (120 - delivery_df['balls_left'])
delivery_df['rrr'] = (delivery_df['runs_left'] * 6) / delivery_df['balls_left']
delivery_df['result'] = delivery_df.apply(lambda row: 1 if row['batting_team'] == row['winner'] else 0, axis=1)
final_df = delivery_df[['batting_team', 'bowling_team', 'city', 'runs_left', 'balls_left', 'wickets', 'total_runs_x', 'crr', 'rrr', 'result']]
final_df.dropna(inplace=True)
final_df = final_df[final_df['balls_left'] != 0]

# Train model
X = final_df.iloc[:, :-1]
y = final_df.iloc[:, -1]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)
trf = ColumnTransformer([
    ('trf', OneHotEncoder(sparse=False, drop='first'), ['batting_team', 'bowling_team', 'city'])
], remainder='passthrough')
pipe = Pipeline(steps=[
    ('step1', trf),
    ('step2', LogisticRegression(solver='liblinear'))
])
pipe.fit(X_train, y_train)
y_pred = pipe.predict(X_test)
print("Accuracy Score: ", accuracy_score(y_test, y_pred))
pickle.dump(pipe, open('pipe.pkl', 'wb'))

# Streamlit app
def app():
    st.title('Cricket Match Prediction')

    # User input for match ID
    match_id = st.number_input('Enter match ID:', min_value=1)

    # Display match summary
    def match_summary(row):
        st.write("Match ID: ", row['match_id'])
        st.write("City: ", row['city'])
        st.write("Winner: ", row['winner'])
        st.write("Total Runs: ", row['total_runs'])

    match_summary(match_df[match_df['match_id'] == match_id].iloc[0])

    def match_progression(x_df, match_id, pipe):
     matches = x_df[x_df['match_id'] == match_id]


    matches = matches[(matches['ball'] == 6)]
    temp_df = match[['batting_team', 'bowling_team', 'city', 'runs_left', 'balls_left', 'wickets', 'total_runs_x', 'crr', 'rrr']].dropna()
    temp_df = temp_df[temp_df['balls_left'] != 0]
    result = pipe.predict_proba(temp_df)
    temp_df['lose'] = np.round(result.T[0] * 100, 1)
    temp_df['win'] = np.round(result.T[1] * 100, 1)
    temp_df['end_of_over'] = range(1, temp_df.shape[0] + 1)

    target = temp_df['total_runs_x'].values[0]
    runs = list(temp_df['runs_left'].values)
    new_runs = runs[:]
    runs.insert(0, target)
    temp_df['runs_after_over'] = np.array(runs)[:-1] - np.array(new_runs)
    wickets = list(temp_df['wickets'].values)
    new_wickets = wickets[:]
    new_wickets.insert(0, 10)
    wickets.append(0)
    w = np.array(wickets)
    nw = np.array(new_wickets)
    temp_df['wickets_in_over'] = (nw - w)[0:temp_df.shape[0]]

    return temp_df, target

# Define the app function
def app():
    st.title('Cricket Match Prediction')

    # User input for match ID
    match_id = st.number_input('Enter match ID:', min_value=1)

    # Display match summary
    def match_summary(row):
        st.write("Match ID: ", row['match_id'])
        st.write("City: ", row['city'])
        st.write("Winner: ", row['winner'])
        st.write("Total Runs: ", row['total_runs'])

    match_summary(match_df[match_df['match_id'] == match_id].iloc[0])
if __name__ == '__main__':
    app()